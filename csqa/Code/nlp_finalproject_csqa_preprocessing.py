# -*- coding: utf-8 -*-
"""NLP_FinalProject_CSQA_Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11jyG-0DKTnnfXqSo77rXor7iyamg_w2G
"""

import pandas as pd
df = pd.read_json('/content/drive/MyDrive/NLP/FinalProject/train_rand_split.jsonl', lines = True)
df.rename(columns={"answerKey": "label"})
train_data=pd.DataFrame()
train_data['label']=df['answerKey']
sent1 = []
sent2 = []
ending0=[]
ending1=[]
ending2=[]
ending3=[]
ending4=[]
labels=[]
for i in range(df.shape[0]):
  concept=df.iloc[i]['question']
  if "stem" in concept:
    sent1.append(concept['stem'])
  else:
    sent1.append("None")
  if "question_concept" in concept:
    sent2.append(concept['question_concept'])
  else:
    sent2.append("None")
  if "choices" in concept:
    for j in range(len(concept["choices"])):
      if j==0:
        ending0.append(concept["choices"][j]["label"]+". "+concept["choices"][j]["text"])
      elif j==1:
        ending1.append(concept["choices"][j]["label"]+". "+concept["choices"][j]["text"])
      elif j==2:
        ending2.append(concept["choices"][j]["label"]+". "+concept["choices"][j]["text"])
      elif j==3:
        ending3.append(concept["choices"][j]["label"]+". "+concept["choices"][j]["text"])
      elif j==4:
        ending4.append(concept["choices"][j]["label"]+". "+concept["choices"][j]["text"])
  else:
    ending0.append("None")
    ending1.append("None")
    ending2.append("None")
    ending3.append("None")
    ending4.append("None")
  labels.append(ord(df.iloc[i]["answerKey"])-ord("A"))
train_data["sent1"] = sent1
train_data["sent2"] = sent2
train_data["ending0"]=ending0
train_data["ending1"]=ending1
train_data["ending2"]=ending2
train_data["ending3"]=ending3
train_data["ending4"]=ending4
train_data["label"]=labels

train_data.to_csv('/content/drive/MyDrive/NLP/FinalProject/train.csv')
train_data

pip install pytorch-lightning

import pandas as pd
df = pd.read_json('/content/drive/MyDrive/NLP/FinalProject/dev_rand_split.jsonl', lines = True)
dev_data=pd.DataFrame()
# dev_data['label']=df['answerKey']
sent1 = []
sent2 = []
ending0=[]
ending1=[]
ending2=[]
ending3=[]
ending4=[]
labels = []
for i in range(df.shape[0]):
  concept=df.iloc[i]['question']
  if "stem" in concept:
    sent1.append(concept['stem'])
  else:
    sent1.append("None")
  if "question_concept" in concept:
    sent2.append(concept['question_concept'])
  else:
    sent2.append("None")
  if "choices" in concept:
    for j in range(len(concept["choices"])):
      if j==0:
        ending0.append(concept["choices"][j]["label"]+". "+concept["choices"][j]["text"])
      elif j==1:
        ending1.append(concept["choices"][j]["label"]+". "+concept["choices"][j]["text"])
      elif j==2:
        ending2.append(concept["choices"][j]["label"]+". "+concept["choices"][j]["text"])
      elif j==3:
        ending3.append(concept["choices"][j]["label"]+". "+concept["choices"][j]["text"])
      elif j==4:
        ending4.append(concept["choices"][j]["label"]+". "+concept["choices"][j]["text"])
  else:
    ending0.append("None")
    ending1.append("None")
    ending2.append("None")
    ending3.append("None")
    ending4.append("None")
  labels.append(ord(df.iloc[i]["answerKey"])-ord("A"))
  
dev_data["sent1"] = sent1
dev_data["sent2"] = sent2
dev_data["ending0"]=ending0
dev_data["ending1"]=ending1
dev_data["ending2"]=ending2
dev_data["ending3"]=ending3
dev_data["ending4"]=ending4
dev_data["label"]=labels
dev_data.to_csv('/content/drive/MyDrive/NLP/FinalProject/dev.csv')
dev_data['label'].value_counts()

!pip install transformers

# !python /content/drive/MyDrive/NLP/FinalProject/mcq_training_lightning.py --num_workers 4 --model_name_or_path bert-base-uncased --hidden_dropout_prob 0.15 --max_input_seq_length 200 --max_train_samples -1 --output_dir /content/drive/MyDrive/NLP/FinalProject/  --predictions_file predictions.csv --TRAIN_FILE /content/drive/MyDrive/NLP/FinalProject/selected_data_easy.csv  --DEV_FILE /content/drive/MyDrive/NLP/FinalProject/dev.csv --train_batch_size 8 --eval_batch_size 8 --max_train_samples 5000 --num_train_epochs 5 --gradient_accumulation_steps 1 --seed 42 --save_top_k 1 --learning_rate 5e-05  --write_dev_predictions

python mcq_training_lightning.py --model_name_or_path bert-base-uncased --hidden_dropout_prob 0.15 --max_input_seq_length 64  --output_dir ./outputs/mcq/  --predictions_file predictions.csv --TRAIN_FILE ./mcq/train.csv  --DEV_FILE ./mcq/train.csv --train_batch_size 8 --eval_batch_size 8 --max_train_samples -1 --num_train_epochs 5 --gradient_accumulation_steps 1 --seed 42 --save_top_k 1 --learning_rate 5e-05 --write_dev_predictions --num_workers 4